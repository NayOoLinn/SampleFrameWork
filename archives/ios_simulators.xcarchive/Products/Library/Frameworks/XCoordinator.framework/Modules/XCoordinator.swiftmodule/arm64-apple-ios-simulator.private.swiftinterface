// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.1 (swiftlang-5.7.1.135.3 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios9.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name XCoordinator
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Foundation
import Swift
import UIKit
@_exported import XCoordinator
import _Concurrency
import _StringProcessing
@objc open class Animation : ObjectiveC.NSObject {
  public static let `default`: XCoordinator.Animation
  open var presentationAnimation: XCoordinator.TransitionAnimation?
  open var dismissalAnimation: XCoordinator.TransitionAnimation?
  public init(presentation: XCoordinator.TransitionAnimation?, dismissal: XCoordinator.TransitionAnimation?)
  @objc deinit
}
extension XCoordinator.Animation : UIKit.UIViewControllerTransitioningDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func interactionControllerForPresentation(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func interactionControllerForDismissal(using animator: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
}
public typealias AnyNavigationCoordinator<RouteType> = XCoordinator.AnyCoordinator<RouteType, XCoordinator.NavigationTransition> where RouteType : XCoordinator.Route
public typealias AnyTabBarCoordinator<RouteType> = XCoordinator.AnyCoordinator<RouteType, XCoordinator.TabBarTransition> where RouteType : XCoordinator.Route
public typealias AnyViewCoordinator<RouteType> = XCoordinator.AnyCoordinator<RouteType, XCoordinator.ViewTransition> where RouteType : XCoordinator.Route
public class AnyCoordinator<RouteType, TransitionType> : XCoordinator.Coordinator where RouteType : XCoordinator.Route, TransitionType : XCoordinator.TransitionProtocol {
  public init<C>(_ coordinator: C) where RouteType == C.RouteType, TransitionType == C.TransitionType, C : XCoordinator.Coordinator
  public var rootViewController: TransitionType.RootViewController {
    get
  }
  public var viewController: UIKit.UIViewController! {
    get
  }
  public func prepareTransition(for route: RouteType) -> TransitionType
  public func presented(from presentable: XCoordinator.Presentable?)
  public func registerParent(_ presentable: XCoordinator.Presentable & Swift.AnyObject)
  public func setRoot(for window: UIKit.UIWindow)
  public func addChild(_ presentable: XCoordinator.Presentable)
  public func removeChild(_ presentable: XCoordinator.Presentable)
  public func removeChildrenIfNeeded()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnyTransitionPerformer<TransitionType> : XCoordinator.TransitionPerformer where TransitionType : XCoordinator.TransitionProtocol {
  public var viewController: UIKit.UIViewController! {
    get
  }
  public var rootViewController: TransitionType.RootViewController {
    get
  }
  public func presented(from presentable: XCoordinator.Presentable?)
  public func performTransition(_ transition: TransitionType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.PresentationHandler? = nil)
  @objc deinit
}
extension XCoordinator.BaseCoordinator {
  public typealias RootViewController = TransitionType.RootViewController
}
open class BaseCoordinator<RouteType, TransitionType> : XCoordinator.Coordinator where RouteType : XCoordinator.Route, TransitionType : XCoordinator.TransitionProtocol {
  public var children: [XCoordinator.Presentable] {
    get
  }
  public var rootViewController: XCoordinator.BaseCoordinator<RouteType, TransitionType>.RootViewController {
    get
  }
  open var viewController: UIKit.UIViewController! {
    get
  }
  public init(rootViewController: XCoordinator.BaseCoordinator<RouteType, TransitionType>.RootViewController, initialRoute: RouteType?)
  public init(rootViewController: XCoordinator.BaseCoordinator<RouteType, TransitionType>.RootViewController, initialTransition: TransitionType?)
  open func presented(from presentable: XCoordinator.Presentable?)
  public func removeChildrenIfNeeded()
  public func addChild(_ presentable: XCoordinator.Presentable)
  public func removeChild(_ presentable: XCoordinator.Presentable)
  open func prepareTransition(for route: RouteType) -> TransitionType
  public func registerParent(_ presentable: XCoordinator.Presentable & Swift.AnyObject)
  @available(iOS, unavailable, message: "Please specify the rootViewController in the initializer of your coordinator instead.")
  open func generateRootViewController() -> XCoordinator.BaseCoordinator<RouteType, TransitionType>.RootViewController
  @objc deinit
}
extension XCoordinator.BaseCoordinator {
  public func registerInteractiveTransition<GestureRecognizer>(for route: RouteType, triggeredBy recognizer: GestureRecognizer, handler: @escaping (_ handlerRecognizer: GestureRecognizer, _ transition: () -> XCoordinator.TransitionAnimation?) -> Swift.Void, completion: XCoordinator.PresentationHandler? = nil) where GestureRecognizer : UIKit.UIGestureRecognizer
  public func registerInteractiveTransition<GestureRecognizer>(for route: RouteType, triggeredBy recognizer: GestureRecognizer, progress: @escaping (GestureRecognizer) -> CoreFoundation.CGFloat, shouldFinish: @escaping (GestureRecognizer) -> Swift.Bool, completion: XCoordinator.PresentationHandler? = nil) where GestureRecognizer : UIKit.UIGestureRecognizer
  public func unregisterInteractiveTransitions(triggeredBy recognizer: UIKit.UIGestureRecognizer)
}
public typealias BasicNavigationCoordinator<R> = XCoordinator.BasicCoordinator<R, XCoordinator.NavigationTransition> where R : XCoordinator.Route
public typealias BasicViewCoordinator<R> = XCoordinator.BasicCoordinator<R, XCoordinator.ViewTransition> where R : XCoordinator.Route
public typealias BasicTabBarCoordinator<R> = XCoordinator.BasicCoordinator<R, XCoordinator.TabBarTransition> where R : XCoordinator.Route
open class BasicCoordinator<RouteType, TransitionType> : XCoordinator.BaseCoordinator<RouteType, TransitionType> where RouteType : XCoordinator.Route, TransitionType : XCoordinator.TransitionProtocol {
  public enum InitialLoadingType {
    case immediately
    case presented
    public static func == (a: XCoordinator.BasicCoordinator<RouteType, TransitionType>.InitialLoadingType, b: XCoordinator.BasicCoordinator<RouteType, TransitionType>.InitialLoadingType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public init(rootViewController: XCoordinator.BasicCoordinator<RouteType, TransitionType>.RootViewController, initialRoute: RouteType? = nil, initialLoadingType: XCoordinator.BasicCoordinator<RouteType, TransitionType>.InitialLoadingType = .presented, prepareTransition: ((RouteType) -> TransitionType)?)
  override open func presented(from presentable: XCoordinator.Presentable?)
  override open func prepareTransition(for route: RouteType) -> TransitionType
  @objc deinit
}
public protocol Container {
  var view: UIKit.UIView! { get }
  var viewController: UIKit.UIViewController! { get }
}
extension UIKit.UIViewController : XCoordinator.Container {
  @_Concurrency.MainActor(unsafe) public var viewController: UIKit.UIViewController! {
    get
  }
}
extension UIKit.UIView : XCoordinator.Container {
  @_Concurrency.MainActor(unsafe) public var viewController: UIKit.UIViewController! {
    get
  }
  @_Concurrency.MainActor(unsafe) public var view: UIKit.UIView! {
    get
  }
}
public typealias PresentationHandler = () -> Swift.Void
public typealias ContextPresentationHandler = (XCoordinator.TransitionContext) -> Swift.Void
public protocol Coordinator : XCoordinator.Router, XCoordinator.TransitionPerformer {
  func prepareTransition(for route: Self.RouteType) -> Self.TransitionType
  func addChild(_ presentable: XCoordinator.Presentable)
  func removeChild(_ presentable: XCoordinator.Presentable)
  func removeChildrenIfNeeded()
}
extension XCoordinator.Coordinator {
  public typealias RootViewController = Self.TransitionType.RootViewController
}
extension XCoordinator.Coordinator {
  public var viewController: UIKit.UIViewController! {
    get
  }
}
extension XCoordinator.Coordinator where Self : AnyObject {
  public var weakRouter: XCoordinator.WeakRouter<Self.RouteType> {
    get
  }
  public var unownedRouter: XCoordinator.UnownedRouter<Self.RouteType> {
    get
  }
}
extension XCoordinator.Coordinator where Self : AnyObject {
  public var anyCoordinator: XCoordinator.AnyCoordinator<Self.RouteType, Self.TransitionType> {
    get
  }
  public func presented(from presentable: XCoordinator.Presentable?)
  public func childTransitionCompleted()
  public func contextTrigger(_ route: Self.RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.ContextPresentationHandler?)
  public func chain(routes: [Self.RouteType]) -> Self.TransitionType
  public func performTransition(_ transition: Self.TransitionType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.PresentationHandler? = nil)
}
public protocol TransitionContext {
  var presentables: [XCoordinator.Presentable] { get }
  var animation: XCoordinator.TransitionAnimation? { get }
}
extension XCoordinator.Coordinator where Self : AnyObject {
  public func deepLink<RootViewController, S>(_ route: Self.RouteType, _ remainingRoutes: S) -> XCoordinator.Transition<RootViewController> where S : Swift.Sequence, Self.TransitionType == XCoordinator.Transition<RootViewController>, S.Element == XCoordinator.Route
  public func deepLink<RootViewController>(_ route: Self.RouteType, _ remainingRoutes: XCoordinator.Route...) -> XCoordinator.Transition<RootViewController> where Self.TransitionType == XCoordinator.Transition<RootViewController>
}
@objc @_Concurrency.MainActor(unsafe) open class InteractiveTransitionAnimation : ObjectiveC.NSObject, XCoordinator.TransitionAnimation {
  @_Concurrency.MainActor(unsafe) open var interactionController: XCoordinator.PercentDrivenInteractionController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(duration: Foundation.TimeInterval, transition: @escaping (UIKit.UIViewControllerContextTransitioning) -> Swift.Void, generateInteractionController: @escaping () -> XCoordinator.PercentDrivenInteractionController?)
  @_Concurrency.MainActor(unsafe) convenience public init(duration: Foundation.TimeInterval, transition: @escaping (UIKit.UIViewControllerContextTransitioning) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) convenience public init(transitionAnimation: XCoordinator.StaticTransitionAnimation, generateInteractionController: @escaping () -> XCoordinator.PercentDrivenInteractionController?)
  @_Concurrency.MainActor(unsafe) convenience public init(transitionAnimation: XCoordinator.StaticTransitionAnimation)
  @_Concurrency.MainActor(unsafe) @objc open func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc open func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) open func generateInteractionController() -> XCoordinator.PercentDrivenInteractionController?
  @_Concurrency.MainActor(unsafe) open func start()
  @_Concurrency.MainActor(unsafe) open func cleanup()
  @objc deinit
}
@objc @available(iOS 10.0, tvOS 10.0, *)
@_Concurrency.MainActor(unsafe) open class InterruptibleTransitionAnimation : XCoordinator.InteractiveTransitionAnimation {
  @_Concurrency.MainActor(unsafe) public init(duration: Foundation.TimeInterval, generateAnimator: @escaping (UIKit.UIViewControllerContextTransitioning) -> UIKit.UIViewImplicitlyAnimating, generateInteractionController: @escaping () -> XCoordinator.PercentDrivenInteractionController?)
  @_Concurrency.MainActor(unsafe) convenience public init(duration: Foundation.TimeInterval, generateAnimator: @escaping (UIKit.UIViewControllerContextTransitioning) -> UIKit.UIViewImplicitlyAnimating)
  @_Concurrency.MainActor(unsafe) open func generateInterruptibleAnimator(using transitionContext: UIKit.UIViewControllerContextTransitioning) -> UIKit.UIViewImplicitlyAnimating
  @_Concurrency.MainActor(unsafe) @objc override open func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) @objc open func interruptibleAnimator(using transitionContext: UIKit.UIViewControllerContextTransitioning) -> UIKit.UIViewImplicitlyAnimating
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class NavigationAnimationDelegate : ObjectiveC.NSObject {
  open var velocityThreshold: CoreFoundation.CGFloat {
    get
  }
  open var transitionProgressThreshold: CoreFoundation.CGFloat {
    get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension XCoordinator.NavigationAnimationDelegate : UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, animationControllerFor operation: UIKit.UINavigationController.Operation, from fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, didShow viewController: UIKit.UIViewController, animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func navigationController(_ navigationController: UIKit.UINavigationController, willShow viewController: UIKit.UIViewController, animated: Swift.Bool)
}
extension XCoordinator.NavigationAnimationDelegate : UIKit.UIGestureRecognizerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func gestureRecognizerShouldBegin(_ gestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic open func handleInteractivePopGestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  public func setupPopGestureRecognizer(for navigationController: UIKit.UINavigationController)
}
open class NavigationCoordinator<RouteType> : XCoordinator.BaseCoordinator<RouteType, XCoordinator.NavigationTransition> where RouteType : XCoordinator.Route {
  final public let animationDelegate: XCoordinator.NavigationAnimationDelegate
  public var delegate: UIKit.UINavigationControllerDelegate? {
    get
    set
  }
  override public init(rootViewController: XCoordinator.NavigationCoordinator<RouteType>.RootViewController = .init(), initialRoute: RouteType? = nil)
  public init(rootViewController: XCoordinator.NavigationCoordinator<RouteType>.RootViewController = .init(), root: XCoordinator.Presentable)
  @objc deinit
}
public typealias NavigationTransition = XCoordinator.Transition<UIKit.UINavigationController>
extension XCoordinator.Transition where RootViewController : UIKit.UINavigationController {
  public static func push(_ presentable: XCoordinator.Presentable, animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func pop(animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func pop(to presentable: XCoordinator.Presentable, animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func popToRoot(animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func set(_ presentables: [XCoordinator.Presentable], animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
}
open class PageCoordinator<RouteType> : XCoordinator.BaseCoordinator<RouteType, XCoordinator.PageTransition> where RouteType : XCoordinator.Route {
  final public let dataSource: UIKit.UIPageViewControllerDataSource
  public init(rootViewController: XCoordinator.PageCoordinator<RouteType>.RootViewController = .init(), pages: [XCoordinator.Presentable], loop: Swift.Bool = false, set: XCoordinator.Presentable? = nil, direction: UIKit.UIPageViewController.NavigationDirection = .forward)
  public init(rootViewController: XCoordinator.PageCoordinator<RouteType>.RootViewController = .init(), dataSource: UIKit.UIPageViewControllerDataSource, set: XCoordinator.Presentable, direction: UIKit.UIPageViewController.NavigationDirection)
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class PageCoordinatorDataSource : ObjectiveC.NSObject, UIKit.UIPageViewControllerDataSource {
  @_Concurrency.MainActor(unsafe) open var pages: [UIKit.UIViewController]
  @_Concurrency.MainActor(unsafe) open var loop: Swift.Bool
  @_Concurrency.MainActor(unsafe) public init(pages: [UIKit.UIViewController], loop: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc open func presentationCount(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func presentationIndex(for pageViewController: UIKit.UIPageViewController) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @_Concurrency.MainActor(unsafe) @objc open func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc deinit
}
public typealias PageTransition = XCoordinator.Transition<UIKit.UIPageViewController>
extension XCoordinator.Transition where RootViewController : UIKit.UIPageViewController {
  public static func set(_ first: XCoordinator.Presentable, _ second: XCoordinator.Presentable? = nil, direction: UIKit.UIPageViewController.NavigationDirection) -> XCoordinator.Transition<RootViewController>
}
public protocol Presentable {
  var viewController: UIKit.UIViewController! { get }
  func router<R>(for route: R) -> XCoordinator.StrongRouter<R>? where R : XCoordinator.Route
  func presented(from presentable: XCoordinator.Presentable?)
  func registerParent(_ presentable: XCoordinator.Presentable & Swift.AnyObject)
  func childTransitionCompleted()
  func setRoot(for window: UIKit.UIWindow)
}
extension XCoordinator.Presentable {
  public func registerParent(_ presentable: XCoordinator.Presentable & Swift.AnyObject)
  public func childTransitionCompleted()
  public func setRoot(for window: UIKit.UIWindow)
  public func router<R>(for route: R) -> XCoordinator.StrongRouter<R>? where R : XCoordinator.Route
  public func presented(from presentable: XCoordinator.Presentable?)
}
extension UIKit.UIViewController : XCoordinator.Presentable {
}
extension UIKit.UIWindow : XCoordinator.Presentable {
}
open class RedirectionRouter<ParentRoute, RouteType> : XCoordinator.Router where ParentRoute : XCoordinator.Route, RouteType : XCoordinator.Route {
  final public let parent: XCoordinator.UnownedRouter<ParentRoute>
  public var viewController: UIKit.UIViewController! {
    get
  }
  public init(viewController: UIKit.UIViewController, parent: XCoordinator.UnownedRouter<ParentRoute>, map: ((RouteType) -> ParentRoute)?)
  open func contextTrigger(_ route: RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.ContextPresentationHandler?)
  open func mapToParentRoute(_ route: RouteType) -> ParentRoute
  @objc deinit
}
public protocol Route {
}
public protocol Router : XCoordinator.Presentable {
  associatedtype RouteType : XCoordinator.Route
  func contextTrigger(_ route: Self.RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.ContextPresentationHandler?)
}
extension XCoordinator.Router {
  public func trigger(_ route: Self.RouteType, with options: XCoordinator.TransitionOptions)
  public func trigger(_ route: Self.RouteType, completion: XCoordinator.PresentationHandler? = nil)
  public func trigger(_ route: Self.RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.PresentationHandler?)
}
extension XCoordinator.Router {
  public var strongRouter: XCoordinator.StrongRouter<Self.RouteType> {
    get
  }
  public func router<R>(for route: R) -> XCoordinator.StrongRouter<R>? where R : XCoordinator.Route
}
@available(iOS 13.0, tvOS 13.0, *)
extension XCoordinator.Router {
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func trigger(_ route: Self.RouteType) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func trigger(_ route: Self.RouteType, with options: XCoordinator.TransitionOptions) async
  #endif
  #if compiler(>=5.3) && $AsyncAwait
  @_Concurrency.MainActor public func contextTrigger(_ route: Self.RouteType, with options: XCoordinator.TransitionOptions) async -> XCoordinator.TransitionContext
  #endif
}
open class SplitCoordinator<RouteType> : XCoordinator.BaseCoordinator<RouteType, XCoordinator.SplitTransition> where RouteType : XCoordinator.Route {
  override public init(rootViewController: XCoordinator.SplitCoordinator<RouteType>.RootViewController = .init(), initialRoute: RouteType?)
  public init(rootViewController: XCoordinator.SplitCoordinator<RouteType>.RootViewController = .init(), master: XCoordinator.Presentable, detail: XCoordinator.Presentable?)
  @objc deinit
}
public typealias SplitTransition = XCoordinator.Transition<UIKit.UISplitViewController>
extension XCoordinator.Transition where RootViewController : UIKit.UISplitViewController {
  public static func set(_ presentables: [XCoordinator.Presentable]) -> XCoordinator.Transition<RootViewController>
}
@objc @_Concurrency.MainActor(unsafe) open class StaticTransitionAnimation : ObjectiveC.NSObject, XCoordinator.TransitionAnimation {
  @_Concurrency.MainActor(unsafe) open var interactionController: XCoordinator.PercentDrivenInteractionController? {
    get
  }
  @_Concurrency.MainActor(unsafe) public init(duration: Foundation.TimeInterval, performAnimation: @escaping (_ context: UIKit.UIViewControllerContextTransitioning) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc open func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @_Concurrency.MainActor(unsafe) @objc open func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
  @_Concurrency.MainActor(unsafe) open func start()
  @_Concurrency.MainActor(unsafe) open func cleanup()
  @objc deinit
}
final public class StrongRouter<RouteType> : XCoordinator.Router where RouteType : XCoordinator.Route {
  public init<T>(_ router: T) where RouteType == T.RouteType, T : XCoordinator.Router
  final public func contextTrigger(_ route: RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.ContextPresentationHandler?)
  final public func trigger(_ route: RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.PresentationHandler?)
  final public func presented(from presentable: XCoordinator.Presentable?)
  final public var viewController: UIKit.UIViewController! {
    get
  }
  final public func registerParent(_ presentable: XCoordinator.Presentable & Swift.AnyObject)
  final public func childTransitionCompleted()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class TabBarAnimationDelegate : ObjectiveC.NSObject {
  @objc override dynamic public init()
  @objc deinit
}
extension XCoordinator.TabBarAnimationDelegate : UIKit.UITabBarControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, interactionControllerFor animationController: UIKit.UIViewControllerAnimatedTransitioning) -> UIKit.UIViewControllerInteractiveTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, animationControllerForTransitionFrom fromVC: UIKit.UIViewController, to toVC: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, didSelect viewController: UIKit.UIViewController)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, shouldSelect viewController: UIKit.UIViewController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, willBeginCustomizing viewControllers: [UIKit.UIViewController])
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, didEndCustomizing viewControllers: [UIKit.UIViewController], changed: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc dynamic open func tabBarController(_ tabBarController: UIKit.UITabBarController, willEndCustomizing viewControllers: [UIKit.UIViewController], changed: Swift.Bool)
}
open class TabBarCoordinator<RouteType> : XCoordinator.BaseCoordinator<RouteType, XCoordinator.TabBarTransition> where RouteType : XCoordinator.Route {
  public var delegate: UIKit.UITabBarControllerDelegate? {
    get
    set
  }
  override public init(rootViewController: XCoordinator.TabBarCoordinator<RouteType>.RootViewController = .init(), initialRoute: RouteType?)
  public init(rootViewController: XCoordinator.TabBarCoordinator<RouteType>.RootViewController = .init(), tabs: [XCoordinator.Presentable])
  public init(rootViewController: XCoordinator.TabBarCoordinator<RouteType>.RootViewController = .init(), tabs: [XCoordinator.Presentable], select: XCoordinator.Presentable)
  public init(rootViewController: XCoordinator.TabBarCoordinator<RouteType>.RootViewController = .init(), tabs: [XCoordinator.Presentable], select: Swift.Int)
  @objc deinit
}
public typealias TabBarTransition = XCoordinator.Transition<UIKit.UITabBarController>
extension XCoordinator.Transition where RootViewController : UIKit.UITabBarController {
  public static func set(_ presentables: [XCoordinator.Presentable], animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func select(_ presentable: XCoordinator.Presentable, animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func select(index: Swift.Int, animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
}
public struct Transition<RootViewController> : XCoordinator.TransitionProtocol where RootViewController : UIKit.UIViewController {
  public typealias PerformClosure = (_ rootViewController: RootViewController, _ options: XCoordinator.TransitionOptions, _ completion: XCoordinator.PresentationHandler?) -> Swift.Void
  public var presentables: [XCoordinator.Presentable] {
    get
  }
  public var animation: XCoordinator.TransitionAnimation? {
    get
  }
  public init(presentables: [XCoordinator.Presentable], animationInUse: XCoordinator.TransitionAnimation?, perform: @escaping XCoordinator.Transition<RootViewController>.PerformClosure)
  public func perform(on rootViewController: RootViewController, with options: XCoordinator.TransitionOptions, completion: XCoordinator.PresentationHandler?)
}
extension XCoordinator.Transition {
  public static func show(_ presentable: XCoordinator.Presentable) -> XCoordinator.Transition<RootViewController>
  public static func showDetail(_ presentable: XCoordinator.Presentable) -> XCoordinator.Transition<RootViewController>
  public static func presentOnRoot(_ presentable: XCoordinator.Presentable, animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func present(_ presentable: XCoordinator.Presentable, animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func embed(_ presentable: XCoordinator.Presentable, in container: XCoordinator.Container) -> XCoordinator.Transition<RootViewController>
  public static func dismissToRoot(animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func dismiss(animation: XCoordinator.Animation? = nil) -> XCoordinator.Transition<RootViewController>
  public static func none() -> XCoordinator.Transition<RootViewController>
  public static func multiple<C>(_ transitions: C) -> XCoordinator.Transition<RootViewController> where C : Swift.Collection, C.Element == XCoordinator.Transition<RootViewController>
  public static func route<C>(_ route: C.RouteType, on coordinator: C) -> XCoordinator.Transition<RootViewController> where C : XCoordinator.Coordinator
  public static func trigger<R>(_ route: R.RouteType, on router: R) -> XCoordinator.Transition<RootViewController> where R : XCoordinator.Router
  public static func perform<TransitionType>(_ transition: TransitionType, on viewController: TransitionType.RootViewController) -> XCoordinator.Transition<RootViewController> where TransitionType : XCoordinator.TransitionProtocol
}
extension XCoordinator.Coordinator where Self : AnyObject {
  @available(iOS, introduced: 9.0, deprecated: 13.0, message: "Use `UIContextMenuInteraction` instead.")
  public func registerPeek<RootViewController>(for source: XCoordinator.Container, route: Self.RouteType) -> XCoordinator.Transition<RootViewController> where Self.TransitionType == XCoordinator.Transition<RootViewController>
}
public protocol TransitionAnimation : UIKit.UIViewControllerAnimatedTransitioning {
  var interactionController: XCoordinator.PercentDrivenInteractionController? { get }
  func start()
  func cleanup()
}
public protocol PercentDrivenInteractionController : UIKit.UIViewControllerInteractiveTransitioning {
  func update(_ percentComplete: CoreFoundation.CGFloat)
  func cancel()
  func finish()
}
extension UIKit.UIPercentDrivenInteractiveTransition : XCoordinator.PercentDrivenInteractionController {
}
public struct TransitionOptions {
  public let animated: Swift.Bool
  public init(animated: Swift.Bool)
}
public protocol TransitionPerformer : XCoordinator.Presentable {
  associatedtype TransitionType : XCoordinator.TransitionProtocol
  var rootViewController: Self.TransitionType.RootViewController { get }
  func performTransition(_ transition: Self.TransitionType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.PresentationHandler?)
}
public protocol TransitionProtocol : XCoordinator.TransitionContext {
  associatedtype RootViewController : UIKit.UIViewController
  func perform(on rootViewController: Self.RootViewController, with options: XCoordinator.TransitionOptions, completion: XCoordinator.PresentationHandler?)
  static func multiple(_ transitions: [Self]) -> Self
}
extension XCoordinator.TransitionProtocol {
  public static func multiple(_ transitions: Self...) -> Self
}
@propertyWrapper public struct UnownedErased<Value> {
  public var wrappedValue: Value {
    get
  }
}
extension XCoordinator.UnownedErased {
  public init<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
  public mutating func set<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
}
@available(iOS, deprecated)
public typealias AnyRouter<RouteType> = XCoordinator.UnownedRouter<RouteType> where RouteType : XCoordinator.Route
public typealias UnownedRouter<RouteType> = XCoordinator.UnownedErased<XCoordinator.StrongRouter<RouteType>> where RouteType : XCoordinator.Route
extension XCoordinator.UnownedErased : XCoordinator.Presentable where Value : XCoordinator.Presentable {
  public var viewController: UIKit.UIViewController! {
    get
  }
  public func childTransitionCompleted()
  public func registerParent(_ presentable: XCoordinator.Presentable & Swift.AnyObject)
  public func presented(from presentable: XCoordinator.Presentable?)
  public func setRoot(for window: UIKit.UIWindow)
}
extension XCoordinator.UnownedErased : XCoordinator.Router where Value : XCoordinator.Router {
  public func contextTrigger(_ route: Value.RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.ContextPresentationHandler?)
  public typealias RouteType = Value.RouteType
}
public typealias ViewTransition = XCoordinator.Transition<UIKit.UIViewController>
open class ViewCoordinator<RouteType> : XCoordinator.BaseCoordinator<RouteType, XCoordinator.ViewTransition> where RouteType : XCoordinator.Route {
  override public init(rootViewController: XCoordinator.ViewCoordinator<RouteType>.RootViewController, initialRoute: RouteType? = nil)
  @objc deinit
}
@propertyWrapper public struct WeakErased<Value> {
  public var wrappedValue: Value? {
    get
  }
}
extension XCoordinator.WeakErased {
  public init<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
  public mutating func set<Erasable>(_ value: Erasable, erase: @escaping (Erasable) -> Value) where Erasable : AnyObject
}
public typealias WeakRouter<RouteType> = XCoordinator.WeakErased<XCoordinator.StrongRouter<RouteType>> where RouteType : XCoordinator.Route
extension XCoordinator.WeakErased : XCoordinator.Presentable where Value : XCoordinator.Presentable {
  public var viewController: UIKit.UIViewController! {
    get
  }
  public func childTransitionCompleted()
  public func registerParent(_ presentable: XCoordinator.Presentable & Swift.AnyObject)
  public func presented(from presentable: XCoordinator.Presentable?)
  public func setRoot(for window: UIKit.UIWindow)
}
extension XCoordinator.WeakErased : XCoordinator.Router where Value : XCoordinator.Router {
  public func contextTrigger(_ route: Value.RouteType, with options: XCoordinator.TransitionOptions, completion: XCoordinator.ContextPresentationHandler?)
  public typealias RouteType = Value.RouteType
}
extension XCoordinator.BasicCoordinator.InitialLoadingType : Swift.Equatable {}
extension XCoordinator.BasicCoordinator.InitialLoadingType : Swift.Hashable {}
